new_packages <- list_packages[!(list_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
# 加载所需的库
library(shiny)
library(ggplot2)
library(lubridate)
library(dplyr)
library(leaflet)
library(maps)
library(scales)
library(tidyr)
library(countrycode)
library(shinydashboard)
library(countrycode)
library(rworldmap)
# UI
ui <- dashboardPage(
dashboardHeader(title = "World Happiness Report 2023"),
dashboardSidebar(
sidebarMenu(
menuItem("Map Analysis", tabName = "mapAnalysis", icon = icon("globe"))
# 您可以在这里添加更多的menuItem来创建更多的tabs
)
),
dashboardBody(
tabItems(
tabItem(tabName = "mapAnalysis",
leafletOutput("map")  # 用于显示地图的输出容器
)
)
)
)
server <- function(input, output) {
output$map <- renderLeaflet({
# 读取数据
df <- read.csv("WHR_2023.csv")
# 获取国家的ISO代码
df$iso3c <- countrycode(df$country, "country.name", "iso3c")
# 检查未匹配的国家
unmatched_countries <- df[is.na(df$iso3c), "country"]
if(length(unmatched_countries) > 0) {
warning("以下国家未匹配：", paste(unmatched_countries, collapse = ", "))
}
# 获取国家的经纬度
world <- getMap()
df <- merge(df, world@data[, c("ISO_A3", "LAT", "LON")], by.x = "iso3c", by.y = "ISO_A3")
# 定义颜色分配函数
bins <- c(min(df$happiness_score), quantile(df$happiness_score, probs = seq(.25, .75, by = .25)), max(df$happiness_score))
pal <- colorBin(palette = c("red", "yellow", "green"), domain = df$happiness_score, bins = bins)
# 创建交互式地图
leaflet(world) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(df$happiness_score[df$iso3c == world$ISO_A3]), fillOpacity = 0.7, stroke = FALSE, smoothFactor = 0.2, popup = ~paste(df$country[df$iso3c == world$ISO_A3], "<br>", "Happiness Score: ", df$happiness_score[df$iso3c == world$ISO_A3]))
})
}
runApp('1.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('1.R')
runApp('1.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('IVA2.R')
library(shiny); runApp('IVA2.R')
runApp('Map.R')
runApp('Map.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('IVA2.R')
runApp('Map.R')
all_data
head(all_data)
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
unique(all_data$iso3c)
unique(all_data$iso3c)
print(clicked_country_iso)
all_data <- read.csv("WHR.csv")
print(clicked_country_iso)
unique(all_data$iso3c)
all_data <- read.csv("WHR.csv")
all_data <- read.csv("WHR.csv")
all_data$iso3c <- countrycode(all_data$country, "country.name", "iso3c")
unique(all_data$iso3c)
runApp('Map.R')
unique(all_data$iso3c)
runApp('Map.R')
runApp('Map.R')
head(all_data)
summarise(all_data)
observe({
print(input$year)
})
print(input$year)
runApp('Map.R')
all_data$year <- as.numeric(all_data$year)
print(subset(all_data, year == 2015))
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
# 找出无法匹配的国家
unmatched_countries <- all_data[is.na(countrycode(all_data$country, "country.name", "iso3c")), "country"]
print(unmatched_countries)
unmatched_countries <- all_data[is.na(countrycode(all_data$country, "country.name", "iso3c")), "country"]
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('Map.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('3.R')
unique_regions <- unique(all_data$region)
world_regions <- unique(world$REGION)
# 查看哪些 region 是匹配的
matching_regions <- intersect(unique_regions, world_regions)
print("Matching Regions:")
print(matching_regions)
# 查看哪些 region 是不匹配的
non_matching_regions <- setdiff(unique_regions, world_regions)
print("Non-Matching Regions:")
print(non_matching_regions)
# 创建一个映射列表，将 all_data$region 中的值映射到 world$REGION 中的值
region_mapping <- list(
"Western Europe" = "Europe",
"North America and ANZ" = "Northern America",
"Middle East and North Africa" = "Northern Africa",
"Latin America and Caribbean" = "Caribbean",
"Southeast Asia" = "Southern Asia",
"Central and Eastern Europe" = "Eastern Europe",
"East Asia" = "Eastern Asia",
"Commonwealth of Independent States" = "Eastern Europe",
"Sub-Saharan Africa" = "Sub-Saharan Africa",
"South Asia" = "Southern Asia",
"Africa" = "Africa"
)
# 应用映射
all_data$region <- unlist(lapply(all_data$region, function(region) {
if (region %in% names(region_mapping)) {
return(region_mapping[[region]])
} else {
return(region)
}
}))
print(unique(world$REGION))
# 创建一个映射列表，将 all_data$region 中的值映射到 world$REGION 中的值
region_mapping <- list(
"Western Europe" = "Europe",
"North America and ANZ" = "North America",
"Middle East and North Africa" = "Africa",
"Latin America and Caribbean" = "South America",
"Southeast Asia" = "Asia",
"Central and Eastern Europe" = "Europe",
"East Asia" = "Asia",
"Commonwealth of Independent States" = "Europe",
"Sub-Saharan Africa" = "Africa",
"South Asia" = "Asia",
"Africa" = "Africa"
)
# 应用映射
all_data$region <- unlist(lapply(all_data$region, function(region) {
if (region %in% names(region_mapping)) {
return(region_mapping[[region]])
} else {
return(region)
}
}))
print(unique(world$REGION))
# 创建一个映射列表，将 all_data$region 中的值映射到 world$REGION 中的值
region_mapping <- list(
"Western Europe" = "Europe",
"North America and ANZ" = "North America",
"Middle East and North Africa" = "Africa",
"Latin America and Caribbean" = "South America",
"Southeast Asia" = "Asia",
"Central and Eastern Europe" = "Europe",
"East Asia" = "Asia",
"Commonwealth of Independent States" = "Europe",
"Sub-Saharan Africa" = "Africa",
"South Asia" = "Asia",
"Africa" = "Africa"
)
# 应用映射
all_data$region <- unlist(lapply(all_data$region, function(region) {
if (region %in% names(region_mapping)) {
return(region_mapping[[region]])
} else {
return(region)
}
}))
print(unique(world$REGION))
runApp('3.R')
runApp('3.R')
runApp('3.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
install.packages("gghighlight")
library(shiny); runApp('2.R')
library(ggbump)
library(leaflet)
install.packages("ggbump")
install.packages("ggbump")
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
str(all_data$gdp_per_capita)
str(all_data$happiness_score)
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
top10_countries
print(top10_countries)
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('5.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
runApp('2.R')
library(shiny); runApp('IVA2.R')
library(shiny); runApp('IVA2.R')
runApp('IVA2.R')
runApp('~/Documents/2023 S2/geom90007 IV/Assignment 2/R')
runApp('~/Documents/2023 S2/geom90007 IV/Assignment 2/R')
runApp('~/Documents/2023 S2/geom90007 IV/Assignment 2/R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
